// Generated by using Rcpp::compileAttributes() -> do not edit by hand
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include <RcppArmadillo.h>
#include <Rcpp.h>

using namespace Rcpp;

#ifdef RCPP_USE_GLOBAL_ROSTREAM
Rcpp::Rostream<true>&  Rcpp::Rcout = Rcpp::Rcpp_cout_get();
Rcpp::Rostream<false>& Rcpp::Rcerr = Rcpp::Rcpp_cerr_get();
#endif

// epan
arma::mat epan(arma::mat t, double h0);
RcppExport SEXP _PLSiMCpp_epan(SEXP tSEXP, SEXP h0SEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::mat >::type t(tSEXP);
    Rcpp::traits::input_parameter< double >::type h0(h0SEXP);
    rcpp_result_gen = Rcpp::wrap(epan(t, h0));
    return rcpp_result_gen;
END_RCPP
}
// epand
arma::mat epand(arma::mat t, double h0);
RcppExport SEXP _PLSiMCpp_epand(SEXP tSEXP, SEXP h0SEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::mat >::type t(tSEXP);
    Rcpp::traits::input_parameter< double >::type h0(h0SEXP);
    rcpp_result_gen = Rcpp::wrap(epand(t, h0));
    return rcpp_result_gen;
END_RCPP
}
// etandder
List etandder(arma::vec a, arma::vec b, double h, arma::vec y, arma::mat z, arma::mat x, bool flag);
RcppExport SEXP _PLSiMCpp_etandder(SEXP aSEXP, SEXP bSEXP, SEXP hSEXP, SEXP ySEXP, SEXP zSEXP, SEXP xSEXP, SEXP flagSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::vec >::type a(aSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type b(bSEXP);
    Rcpp::traits::input_parameter< double >::type h(hSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type y(ySEXP);
    Rcpp::traits::input_parameter< arma::mat >::type z(zSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type x(xSEXP);
    Rcpp::traits::input_parameter< bool >::type flag(flagSEXP);
    rcpp_result_gen = Rcpp::wrap(etandder(a, b, h, y, z, x, flag));
    return rcpp_result_gen;
END_RCPP
}
// lasso
List lasso(arma::mat x, arma::mat y, double lambda, bool verbose, int MaxStep);
RcppExport SEXP _PLSiMCpp_lasso(SEXP xSEXP, SEXP ySEXP, SEXP lambdaSEXP, SEXP verboseSEXP, SEXP MaxStepSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::mat >::type x(xSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type y(ySEXP);
    Rcpp::traits::input_parameter< double >::type lambda(lambdaSEXP);
    Rcpp::traits::input_parameter< bool >::type verbose(verboseSEXP);
    Rcpp::traits::input_parameter< int >::type MaxStep(MaxStepSEXP);
    rcpp_result_gen = Rcpp::wrap(lasso(x, y, lambda, verbose, MaxStep));
    return rcpp_result_gen;
END_RCPP
}
// scad
List scad(arma::mat x, arma::mat y, double lambda, bool verbose, int MaxStep);
RcppExport SEXP _PLSiMCpp_scad(SEXP xSEXP, SEXP ySEXP, SEXP lambdaSEXP, SEXP verboseSEXP, SEXP MaxStepSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::mat >::type x(xSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type y(ySEXP);
    Rcpp::traits::input_parameter< double >::type lambda(lambdaSEXP);
    Rcpp::traits::input_parameter< bool >::type verbose(verboseSEXP);
    Rcpp::traits::input_parameter< int >::type MaxStep(MaxStepSEXP);
    rcpp_result_gen = Rcpp::wrap(scad(x, y, lambda, verbose, MaxStep));
    return rcpp_result_gen;
END_RCPP
}
// elasticNet
List elasticNet(arma::mat x, arma::mat y, double lambda, double l1_ratio, bool verbose, int MaxStep);
RcppExport SEXP _PLSiMCpp_elasticNet(SEXP xSEXP, SEXP ySEXP, SEXP lambdaSEXP, SEXP l1_ratioSEXP, SEXP verboseSEXP, SEXP MaxStepSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::mat >::type x(xSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type y(ySEXP);
    Rcpp::traits::input_parameter< double >::type lambda(lambdaSEXP);
    Rcpp::traits::input_parameter< double >::type l1_ratio(l1_ratioSEXP);
    Rcpp::traits::input_parameter< bool >::type verbose(verboseSEXP);
    Rcpp::traits::input_parameter< int >::type MaxStep(MaxStepSEXP);
    rcpp_result_gen = Rcpp::wrap(elasticNet(x, y, lambda, l1_ratio, verbose, MaxStep));
    return rcpp_result_gen;
END_RCPP
}
// plsimCore
List plsimCore(arma::mat x, arma::mat y, arma::mat z, double h, arma::vec zetaini, double lambda, double l1_ratio, int MaxStep, std::string Method, bool flag, bool verbose);
RcppExport SEXP _PLSiMCpp_plsimCore(SEXP xSEXP, SEXP ySEXP, SEXP zSEXP, SEXP hSEXP, SEXP zetainiSEXP, SEXP lambdaSEXP, SEXP l1_ratioSEXP, SEXP MaxStepSEXP, SEXP MethodSEXP, SEXP flagSEXP, SEXP verboseSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::mat >::type x(xSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type y(ySEXP);
    Rcpp::traits::input_parameter< arma::mat >::type z(zSEXP);
    Rcpp::traits::input_parameter< double >::type h(hSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type zetaini(zetainiSEXP);
    Rcpp::traits::input_parameter< double >::type lambda(lambdaSEXP);
    Rcpp::traits::input_parameter< double >::type l1_ratio(l1_ratioSEXP);
    Rcpp::traits::input_parameter< int >::type MaxStep(MaxStepSEXP);
    Rcpp::traits::input_parameter< std::string >::type Method(MethodSEXP);
    Rcpp::traits::input_parameter< bool >::type flag(flagSEXP);
    Rcpp::traits::input_parameter< bool >::type verbose(verboseSEXP);
    rcpp_result_gen = Rcpp::wrap(plsimCore(x, y, z, h, zetaini, lambda, l1_ratio, MaxStep, Method, flag, verbose));
    return rcpp_result_gen;
END_RCPP
}
// plsimestCore
List plsimestCore(arma::mat x, arma::mat y, arma::mat z, double h, arma::vec zetaini, int MaxStep, bool flag);
RcppExport SEXP _PLSiMCpp_plsimestCore(SEXP xSEXP, SEXP ySEXP, SEXP zSEXP, SEXP hSEXP, SEXP zetainiSEXP, SEXP MaxStepSEXP, SEXP flagSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::mat >::type x(xSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type y(ySEXP);
    Rcpp::traits::input_parameter< arma::mat >::type z(zSEXP);
    Rcpp::traits::input_parameter< double >::type h(hSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type zetaini(zetainiSEXP);
    Rcpp::traits::input_parameter< int >::type MaxStep(MaxStepSEXP);
    Rcpp::traits::input_parameter< bool >::type flag(flagSEXP);
    rcpp_result_gen = Rcpp::wrap(plsimestCore(x, y, z, h, zetaini, MaxStep, flag));
    return rcpp_result_gen;
END_RCPP
}

static const R_CallMethodDef CallEntries[] = {
    {"_PLSiMCpp_epan", (DL_FUNC) &_PLSiMCpp_epan, 2},
    {"_PLSiMCpp_epand", (DL_FUNC) &_PLSiMCpp_epand, 2},
    {"_PLSiMCpp_etandder", (DL_FUNC) &_PLSiMCpp_etandder, 7},
    {"_PLSiMCpp_lasso", (DL_FUNC) &_PLSiMCpp_lasso, 5},
    {"_PLSiMCpp_scad", (DL_FUNC) &_PLSiMCpp_scad, 5},
    {"_PLSiMCpp_elasticNet", (DL_FUNC) &_PLSiMCpp_elasticNet, 6},
    {"_PLSiMCpp_plsimCore", (DL_FUNC) &_PLSiMCpp_plsimCore, 11},
    {"_PLSiMCpp_plsimestCore", (DL_FUNC) &_PLSiMCpp_plsimestCore, 7},
    {NULL, NULL, 0}
};

RcppExport void R_init_PLSiMCpp(DllInfo *dll) {
    R_registerRoutines(dll, NULL, CallEntries, NULL, NULL);
    R_useDynamicSymbols(dll, FALSE);
}
